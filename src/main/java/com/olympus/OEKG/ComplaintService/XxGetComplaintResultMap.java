package com.olympus.OEKG.ComplaintService;

import org.apache.commons.dbutils.DbUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;

public class XxGetComplaintResultMap {
	
	
    final Logger LOGGER =LoggerFactory.getLogger(XxGetComplaintResultMap.class);

	public Map<String,String> generateComplaintMap(Connection conn,String strInterfaceId)
	{
		Statement sta = null;
		Map<String,String> list = new HashMap<String,String>();
		StringBuffer sql = new StringBuffer();
		ResultSet rs = null;
	try
	{
		sta = conn.createStatement();
		sql.append("SELECT LTRIM(COMPLAINT.INTERFACE_RECORD_ID),LTRIM(COMPLAINT.SYSTEM_SOURCE_REF_NO),")
			.append("LTRIM(COMPLAINT.SYSTEM_SOURCE),LTRIM(COMPLAINT.PRODUCT_TO_BE_RETURNED),LTRIM(COMPLAINT.PRODUCT_QTY),")
			.append("LTRIM(COMPLAINT.INITIATOR),EVENT_DATE,AWARE_DATE,LTRIM(COMPLAINT.REPORTING_PERSON),")
			.append("LTRIM(COMPLAINT.REPORTING_PERSON_TELEPHONE),LTRIM(COMPLAINT.REPORTING_PERSON_MAIL),")
			.append("LTRIM(COMPLAINT.EVENT_DESCRIPTION),LTRIM(COMPLAINT.IS_THIS_COMPLAINT),LTRIM(COMPLAINT.EVENT_FOUND_AT),")
			.append("LTRIM(COMPLAINT.DEC_TREE_ANS_1),LTRIM(COMPLAINT.DEC_TREE_ANS_2),LTRIM(COMPLAINT.CUSTOMER_ACC_CODE),")
			.append("LTRIM(COMPLAINT.CUSTOMER_ZIP),LTRIM(COMPLAINT.CUSTOMER_TELEPHONE),LTRIM(COMPLAINT.CUSTOMER_RESPONSE_REQUESTED),")
			.append("LTRIM(COMPLAINT.CUSTOMER_NAME),LTRIM(COMPLAINT.CUSTOMER_CITY),LTRIM(COMPLAINT.CUSTOMER_ADDRESS),")
			.append("LTRIM(COMPLAINT.COUNTRY),LTRIM(COMPLAINT.STATE),LTRIM(COMPLAINT.ITEM_CODE),LTRIM(COMPLAINT.OCCUPATION),")
			.append("LTRIM(COMPLAINT.LOT_SERIAL),LTRIM(COMPLAINT.ERROR_CODE),LTRIM(COMPLAINT.CUSTOMER_FILING_A_MED_WATCH),")
			.append("LTRIM(COMPLAINT.HEALTH_PROFESSIONAL),LTRIM(COMPLAINT.CONTACT_PERSON),LTRIM(COMPLAINT.CONTACT_PERSON_EMAIL),")
			.append("LTRIM(COMPLAINT.CONTACT_PHONE),LTRIM(COMPLAINT.NON_COMPLAINT_RATIONALE),PURCHASE_DATE,PRODUCT_RECEIPT_DATE,")
			.append("LTRIM(COMPLAINT.EVALUATION_RESULT),EVALUATION_COMPLETION_DATE,LTRIM(COMPLAINT.EVALUATION_COMPLETED_BY),")
			.append("LTRIM(COMPLAINT.INVESTIGATION_REQUIRED),LTRIM(COMPLAINT.NO_INVESTIGATION_RATIONALE),LTRIM(COMPLAINT.INVESTIGATION_DECISION_BY),")
			.append("INVESTIGATION_DECISION_DATE,LTRIM(COMPLAINT.CORRECTION_DESCRIPTION),LTRIM(COMPLAINT.CORRECTION_ACTION),COMPLAINT_CLOSURE_DATE,")
			.append("LTRIM(COMPLAINT.COMPLAINT_CLOSED_BY),LTRIM(COMPLAINT.ETQ_COMPLAINT_NUMBER),LTRIM(COMPLAINT.ACTIONS_TAKEN_AT_CUST_SITE),")
			.append("LTRIM(COMPLAINT.REF_NUM_ASSOC_W_CUST_CARE),LTRIM(COMPLAINT.COMMERCIAL_DECISION),LTRIM(COMPLAINT.WARRANTY_REV_REQUIRED),")
			.append("EVALUATION_INITIATION_DATE,LTRIM(COMPLAINT. EVALUATION_INITIATION_BY),LTRIM(COMPLAINT.SOFTWRE_VERSION),")
			.append("LTRIM(COMPLAINT.INVESTIGATION_CONCLUSION),INITIATION_DATE,LTRIM(COMPLAINT.ORDER_TYPE),INSTALLATION_DATE,")
			.append("LTRIM(COMPLAINT.EVENTDATE_UNKNOWN),LTRIM(COMPLAINT.INITIATOR_LOCATION),LTRIM(COMPLAINT.BRANCH),")
			.append("LTRIM(COMPLAINT.REPORTING_PERSON_POSITION),LTRIM(COMPLAINT.SEND_REPORT_COMPETENT_AUTH),LTRIM(COMPLAINT.NAME_OF_COMPETENT_AUTH),")
			.append("LTRIM(COMPLAINT.DEPARTMENT),LTRIM(COMPLAINT.FAX),LTRIM(COMPLAINT.CDS_METHOD),LTRIM(COMPLAINT.CARRIER),")
			.append("LTRIM(COMPLAINT.TRACKING_NUMBER),LTRIM(COMPLAINT.NEED_TO_RTRN_ITEM_TO_CUST),LTRIM(COMPLAINT.CDS_MTD_BFR_RTRN_DEVICE_OLY),")
			.append("LTRIM(COMPLAINT.CDS_MTD_DTL),LTRIM(COMPLAINT.OTHER_PRODUCT_INVOLVED),LTRIM(COMPLAINT.SOFTWARE),LTRIM(COMPLAINT.OS_VERSION),")
			.append("LTRIM(COMPLAINT.HARDWARE_TYPE),LTRIM(COMPLAINT.HARDWARE_SERIAL_NUM),LTRIM(COMPLAINT.MANUFACTURER_MODEL_NUM),")
			.append("LTRIM(COMPLAINT.MANUFACTURER_MODEL_SERIAL_NUM),LTRIM(COMPLAINT.REMOTE_SUPPORT_CONN),LTRIM(COMPLAINT.CUST_SUPPLIED_HARDWARE),")
			.append("LTRIM(COMPLAINT.ANTI_VIRUS_SOFTWARE),LTRIM(COMPLAINT.PRODUCT_COMMENT),LTRIM(COMPLAINT.PROC_THERAPEUTIC_DIAGNOSTIC),")
			.append("LTRIM(COMPLAINT.ASSIGN_TO),LTRIM(COMPLAINT.MODEL_NUMBER),LTRIM(COMPLAINT.SYSTEM_SOURCE_2),LTRIM(COMPLAINT.SYSTEM_SOURCE_REF_NO_2),")
			.append("LTRIM(COMPLAINT.GLOBAL_ATTRIBUTE1),LTRIM(COMPLAINT.GLOBAL_ATTRIBUTE2),LTRIM(COMPLAINT.GLOBAL_ATTRIBUTE3),LTRIM(COMPLAINT.GLOBAL_ATTRIBUTE4),")
			.append("XXLOCAL.REPORTING_PERSON_LOCAL_LANG,XXLOCAL.EVENT_DESCRIPTION_LOCAL_LANG,XXLOCAL.CUSTOMER_TELEPHONE_LOCAL_LANG,XXLOCAL.CUSTOMER_NAME_LOCAL_LANG")
			.append(",XXLOCAL.CUSTOMER_CITY_LOCAL_LANG,XXLOCAL.CUSTOMER_ADDRESS_LOCAL_LANG,XXLOCAL.STATE_LOCAL_LANG,XXLOCAL.RPT_PER_POS_LOCAL_LANG,XXLOCAL.")
			.append("NAME_COMPET_AUTH_LOCAL_LANG,XXLOCAL.DEPARTMENT_LOCAL_LANG,XXLOCAL.FAX_LOCAL_LANG,XXLOCAL.CONTACT_PERSON_LOCAL_LANG,XXLOCAL.CDS_METHOD_LOCAL_LANG")
			.append(",XXLOCAL.OTHR_PROD_INVOLVED_LOCAL_LANG,XXLOCAL.EVALUATION_RESULT_LOCAL_LANG,XXLOCAL.CORRECTION_DESC_LOCAL_LANG,COMPLAINT.GLOBAL_ATTRIBUTE5 FROM XX_COMPLAINT_INTERFACE COMPLAINT ")
			.append("LEFT JOIN XX_COMPLAINT_INTERFACE_LOCAL XXLOCAL ON (COMPLAINT.INTERFACE_RECORD_ID=XXLOCAL.INTERFACE_RECORD_ID)")
			.append("WHERE COMPLAINT.INTERFACE_RECORD_ID=").append(strInterfaceId);

		rs = sta.executeQuery(sql.toString());
		 ResultSetMetaData md = rs.getMetaData();
		    int columns = md.getColumnCount();
		    		    while (rs.next()) {
		        for(int i=1; i<=columns; ++i) {
		        	list.put(i+"",rs.getString(i));
		        }
		    }		    
		    return list;
	}
	catch (Exception e) 
	{
		LOGGER.error(e.getMessage());
	}finally{
//		DbUtils.closeQuietly(rs);
//		DbUtils.closeQuietly(sta);		
	}
	return list;
	}
}
